{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Dev/React-Grid/react-grid/src/providers/products-provider.js\";\nimport React, { useReducer, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { getSearchEndpoing } from '../config/api.js';\nimport isEqual from 'lodash/isEqual';\nexport const SearchContext = React.createContext({});\nconst defaultState = {\n  loaded: false,\n  fetching: false,\n  data: [],\n  error: null,\n  query: 'portugal',\n  page: 1\n};\n\nconst ProductsProvider = ({\n  children\n}) => {\n  const [state, setState] = useReducer((state, newState) => ({ ...state,\n    ...newState\n  }), defaultState);\n  useEffect(() => {\n    if (isEqual(previousInputs.current, [state.data, state.query])) return; //custom array of dependencies\n\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source(); //Making the fetch cancelable\n\n    const {\n      token\n    } = source;\n    setState({\n      fetching: true\n    });\n\n    const fetchQuery = async () => {\n      const {\n        query = \"portugal\"\n      } = state;\n      const endpoint = getSearchEndpoing(query);\n      const res = await axios(endpoint, {\n        cancelToken: token\n      });\n      axios.interceptors.response.use(response => Promise.resolve(response), error => Promise.reject(error) //Simple error handling\n      );\n      setState({\n        data: res.data.data,\n        error: null,\n        fetching: false,\n        loaded: true\n      });\n    };\n\n    fetchQuery();\n  }); //Saving a reference of the lattest inputs searched\n\n  const previousInputs = useRef();\n  useEffect(() => {\n    previousInputs.current = [state.data, state.query];\n  });\n  return /*#__PURE__*/React.createElement(SearchContext.Provider, {\n    value: [state.data, setState, state],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nexport default ProductsProvider;","map":{"version":3,"sources":["/Users/user/Documents/Dev/React-Grid/react-grid/src/providers/products-provider.js"],"names":["React","useReducer","useEffect","useRef","axios","getSearchEndpoing","isEqual","SearchContext","createContext","defaultState","loaded","fetching","data","error","query","page","ProductsProvider","children","state","setState","newState","previousInputs","current","CancelToken","source","token","fetchQuery","endpoint","res","cancelToken","interceptors","response","use","Promise","resolve","reject"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,aAAa,GAAGP,KAAK,CAACQ,aAAN,CAAoB,EAApB,CAAtB;AAEP,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,KADS;AAEjBC,EAAAA,QAAQ,EAAE,KAFO;AAGjBC,EAAAA,IAAI,EAAE,EAHW;AAIjBC,EAAAA,KAAK,EAAE,IAJU;AAKjBC,EAAAA,KAAK,EAAE,UALU;AAMjBC,EAAAA,IAAI,EAAE;AANW,CAArB;;AAUA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACrC,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBlB,UAAU,CAClC,CAACiB,KAAD,EAAQE,QAAR,MAAsB,EAAC,GAAGF,KAAJ;AAAW,OAAGE;AAAd,GAAtB,CADkC,EAElCX,YAFkC,CAAtC;AAIAP,EAAAA,SAAS,CACL,MAAM;AACF,QAAGI,OAAO,CAACe,cAAc,CAACC,OAAhB,EAAyB,CAACJ,KAAK,CAACN,IAAP,EAAaM,KAAK,CAACJ,KAAnB,CAAzB,CAAV,EAA+D,OAD7D,CACqE;;AAEvE,UAAMS,WAAW,GAAGnB,KAAK,CAACmB,WAA1B;AACA,UAAMC,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf,CAJE,CAImC;;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAL,IAAAA,QAAQ,CAAC;AAAER,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAR;;AACA,UAAMe,UAAU,GAAG,YAAY;AAC3B,YAAM;AAAEZ,QAAAA,KAAK,GAAG;AAAV,UAAyBI,KAA/B;AACA,YAAMS,QAAQ,GAAGtB,iBAAiB,CAACS,KAAD,CAAlC;AACA,YAAMc,GAAG,GAAG,MAAMxB,KAAK,CAACuB,QAAD,EAAW;AAAEE,QAAAA,WAAW,EAAEJ;AAAf,OAAX,CAAvB;AACArB,MAAAA,KAAK,CAAC0B,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACID,QAAQ,IAAIE,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CADhB,EAEIlB,KAAK,IAAIoB,OAAO,CAACE,MAAR,CAAetB,KAAf,CAFb,CAEmC;AAFnC;AAIAM,MAAAA,QAAQ,CAAC;AACLP,QAAAA,IAAI,EAAEgB,GAAG,CAAChB,IAAJ,CAASA,IADV;AAELC,QAAAA,KAAK,EAAE,IAFF;AAGLF,QAAAA,QAAQ,EAAE,KAHL;AAILD,QAAAA,MAAM,EAAE;AAJH,OAAD,CAAR;AAMH,KAdD;;AAeAgB,IAAAA,UAAU;AACjB,GAxBQ,CAAT,CALqC,CAgCrC;;AACA,QAAML,cAAc,GAAGlB,MAAM,EAA7B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,cAAc,CAACC,OAAf,GAAyB,CAACJ,KAAK,CAACN,IAAP,EAAaM,KAAK,CAACJ,KAAnB,CAAzB;AACH,GAFQ,CAAT;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,CAACI,KAAK,CAACN,IAAP,EAAaO,QAAb,EAAuBD,KAAvB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CA3CD;;AA8CA,eAAeD,gBAAf","sourcesContent":["import React, { useReducer, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { getSearchEndpoing } from '../config/api.js';\nimport isEqual from 'lodash/isEqual';\n\nexport const SearchContext = React.createContext({});\n\nconst defaultState = {\n    loaded: false,\n    fetching: false,\n    data: [],\n    error: null,\n    query: 'portugal',\n    page: 1\n}\n\n\nconst ProductsProvider = ({children}) => {\n    const [ state, setState ] = useReducer(\n        (state, newState) => ({...state, ...newState}),\n        defaultState);\n\n    useEffect(\n        () => {\n            if(isEqual(previousInputs.current, [state.data, state.query])) return; //custom array of dependencies\n\n            const CancelToken = axios.CancelToken;\n            const source = CancelToken.source(); //Making the fetch cancelable\n            const { token } = source;\n            setState({ fetching: true })\n            const fetchQuery = async () => {\n                const { query = \"portugal\" } = state;\n                const endpoint = getSearchEndpoing(query);\n                const res = await axios(endpoint, { cancelToken: token});\n                axios.interceptors.response.use(\n                    response => Promise.resolve(response),\n                    error => Promise.reject(error) //Simple error handling\n                )\n                setState({\n                    data: res.data.data,\n                    error: null,\n                    fetching: false,\n                    loaded: true,\n                })\n            }\n            fetchQuery();\n    });\n\n\n    //Saving a reference of the lattest inputs searched\n    const previousInputs = useRef();\n    useEffect(() => {\n        previousInputs.current = [state.data, state.query];\n    })\n\n    return (\n        <SearchContext.Provider value={[state.data, setState, state]}>\n            {children}\n        </SearchContext.Provider>\n    )\n}\n\n\nexport default ProductsProvider;"]},"metadata":{},"sourceType":"module"}